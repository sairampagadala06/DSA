class Solution {
public:
    bool solve(vector<int> &v,int m,int k,int d)
    {
        int c=0;
        int ans=m;
        for(int i=0;i<v.size();i++)
        {
            if(v[i]<=d)
            {
                c++;
                if(c==k)
                {
                    ans--;
                    c=0;
                    if(ans==0)
                    return true;

                }
                continue;
            }
            else if(c!=0)
            {
                c=0;
                continue;
            }
        }
        return false;

    }
    int minDays(vector<int>& bloomDay, int m, int k) {
    int n=bloomDay.size();
    if(m>n)return -1;
    long long int cc=m*k;
    if((cc)>n)return -1;
    int mx=*max_element(bloomDay.begin(),bloomDay.end());
    int c=0;
    int ans=-1;
   
   //bruteforce
    // for(int i=1;i<=mx;i++)
    // {
    //     for(int j=0;j<n;j++)
    //     {
    //         if(bloomDay[j]<=i)
    //         {
    //             c++;
    //             if(c==k)
    //         {
    //             ans--;
    //             c=0;
    //             if(ans==0)return i;
                
    //         }
    //         continue;
    //         }
    //         else if(c!=0)
    //         {
    //             c=0;
    //             continue;
    //         }
    //     }
    //     ans=m;
    //     c=0;
    // }
    // return -1;
    //binarysearch
    int l=1;
    int h=mx;
    while(l<=h)
    {
        int mid=(l+h)/2;
        bool check=solve(bloomDay,m,k,mid);
        if(check)
        {
            h=mid-1;
            ans=mid;
        }
        else
        {
            l=mid+1;
        }

    }
    return ans;  

    }
};
